@model DiplomaApp.ViewModels.OfferDetails
@if(Model.ChartPrices.Count() >= 1){

    double minPriceChart;
    double maxPriceChart;
    if (Model.ChartPrices.Count >= 2)
    {
        List<double> prices = new List<double>();
        foreach(var item in Model.ChartPrices)
        {
            prices.Add(item.y);
        }
        foreach(var item in Model.ChartPricesPromotional)
        {
            prices.Add(item.y);
        }
        double minPrice1 = prices.Min();
        double minPrice2 = prices.FirstOrDefault(c => c > minPrice1);
        if(minPrice2 < minPrice1)
        {
            minPrice2 = minPrice1;
        }
        double minPriceDifference = minPrice2 - minPrice1;
        minPriceChart = minPrice1 - minPriceDifference/4 - 1;
        maxPriceChart = prices.Max() + minPriceDifference/4 + 1;
    }
    else
    {
        minPriceChart = Math.Min(Model.ChartPrices.Min(c => c.y), Model.ChartPricesPromotional.Min(c => c.y)) * 0.9;
        maxPriceChart = Math.Max(Model.ChartPrices.Max(c => c.y), Model.ChartPricesPromotional.Max(c => c.y)) * 1.1;
    }

<div class="btn-group" role="group" aria-label="Период">
    <input type="radio" class="btn-check" name="chartPeriod" id="dayButton" autocomplete="off" onclick="updateChart(chart, dayAgo, dayFromNow, 'hour')" checked/>
    <label class="btn btn-outline-primary" for="dayButton">Сутки</label>

    <input type="radio" class="btn-check" name="chartPeriod" id="weekButton" autocomplete="off" onclick="updateChart(chart, weekAgo, weekFromNow, 'day')"/>
    <label class="btn btn-outline-primary" for="weekButton">Неделя</label>

    <input type="radio" class="btn-check" name="chartPeriod" id="monthButton" autocomplete="off" onclick="updateChart(chart, monthAgo, monthFromNow, 'day')"/>
    <label class="btn btn-outline-primary" for="monthButton">Месяц</label>

    <input type="radio" class="btn-check" name="chartPeriod" id="yearButton" autocomplete="off" onclick="updateChart(chart, yearAgo, yearFromNow, 'month')"/>
    <label class="btn btn-outline-primary" for="yearButton">Год</label>
</div>
<div class="mt-3 mb-3">
    <canvas id="offerPricesChart" height="70"></canvas>
</div>


<script src="https://cdn.jsdelivr.net/npm/chart.js@3.5.0/dist/chart.js"></script>
<script src="https://cdn.jsdelivr.net/npm/moment@2.29.1/moment.js"></script>
<script src="https://cdn.jsdelivr.net/npm/hammerjs@2.0.8/hammer.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/chartjs-plugin-zoom@1.1.1/dist/chartjs-plugin-zoom.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/chartjs-adapter-moment/1.0.0/chartjs-adapter-moment.js"></script>
<script>
    var dayFromNow = @Json.Serialize(DateTime.UtcNow.AddDays(1));
    var dayAgo = @Json.Serialize(DateTime.UtcNow.AddDays(-1));
    var weekFromNow = @Json.Serialize(DateTime.UtcNow.AddDays(7));
    var weekAgo = @Json.Serialize(DateTime.UtcNow.AddDays(-7));
    var monthFromNow = @Json.Serialize(DateTime.UtcNow.AddMonths(1));
    var monthAgo = @Json.Serialize(DateTime.UtcNow.AddMonths(-1));
    var yearFromNow = @Json.Serialize(DateTime.UtcNow.AddYears(1));
    var yearAgo = @Json.Serialize(DateTime.UtcNow.AddYears(-1));
    var prices = @Json.Serialize(Model.ChartPrices);
    var pricesPromotional = @Json.Serialize(Model.ChartPricesPromotional);
    var minPrice = @Json.Serialize(minPriceChart);
    var maxPrice = @Json.Serialize(maxPriceChart);
    const ctx = document.getElementById('offerPricesChart').getContext('2d');
    var chart = new Chart(ctx, {
         type: 'line',
         data: {
             datasets: [{
                 label: 'Обычная цена',
                 data: prices,
                 fill: false,
                 borderColor: 'rgb(55, 110, 219)'
             },
             {
                 label: 'Акционная цена',
                 data: pricesPromotional,
                 fill: true,
                 borderColor: 'rgb(219, 0, 11)'
             }]
         },
         options: {
             scales: {
                 x: {
                    min: dayAgo,
                    max: dayFromNow,
                    type: 'time',
                    time: {
                      unit: 'hour',
                      tooltipFormat: 'DD.MM.YYYY HH:mm:ss'
                    }
                  },
                 y: {
                     min: minPrice,
                     max: maxPrice,
                 }
             }
         }          
     });
    onload = function()
    {
    chart.render();
    }
    function updateChart(chart, minDate, maxDate, unit)
    {
        chart.options.scales.x.min = minDate;
        chart.options.scales.x.max = maxDate;
        chart.options.scales.x.time.unit = unit;
        chart.update();
    }
</script>
}
else
{
    
}